name: build_release

permissions:
  contents: write     # 用于创建release和推送代码
  checks: read        # 用于读取检查状态
  actions: read       # 用于读取工作流运行状态
  statuses: read      # 用于读取提交状态
  pull-requests: read # 用于读取PR相关检查

on:
  workflow_dispatch:
  push:
    paths: 'src/subscription.ts'

jobs:
  wait-for-check-complete:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name=='push'
    steps:
      - name: Wait For Check Complete
        uses: lewagon/wait-on-check-action@master
        id: wait-check
        with:
          ref: ${{ github.sha }}
          check-name: 'check'
          repo-token: ${{ github.token }}
          wait-interval: 10

  build_release:
    runs-on: ubuntu-latest
    needs: wait-for-check-complete
    if: always() && (needs.wait-for-check-complete.result == 'success' || needs.wait-for-check-complete.result == 'skipped')
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install deps
        run: pnpm install

      - name: Build Releases
        run: pnpm run build

      - name: Get Current Version
        id: version
        run: |
          version=$(node -e "import('@gkd-kit/tools').then((m) => m.stdoutGkdVersion());")
          echo "version=${version}" >> "$GITHUB_OUTPUT"

      - name: Compare Version
        id: compare_version
        run: |
          # 获取最新的tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0")
          # 提取版本号数字部分
          latest_version=${latest_tag#v}
          current_version=${{ steps.version.outputs.version }}
          if [ "$latest_version" = "$current_version" ]; then
            echo "Version unchanged, skipping release"
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "New version detected"
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Git commit
        id: commit
        if: steps.compare_version.outputs.skip == 'false'
        run: |
          git config --local user.email github-actions[bot]@users.noreply.github.com
          git config --local user.name github-actions[bot]
          git status
          git add .
          git commit -a -m "chore: v${{steps.version.outputs.version}}"
        continue-on-error: true

      - name: Git push
        if: ${{ steps.commit.outcome == 'success' }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          branch: ${{ github.ref }}
          tags: true

      - name: Create Release
        if: ${{ steps.commit.outcome == 'success' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: ./dist/CHANGELOG.md
          make_latest: true

      - name: Publish package(if npm token exists)
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ steps.commit.outcome == 'success' && env.NPM_TOKEN != '' }}
        run: |
          pnpm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
          node -e "import('@gkd-kit/tools').then((m) => m.updatePkgVersion());"
          pnpm publish --no-git-checks
          node -e "import('@gkd-kit/tools').then((m) => m.syncNpmmirror());"